"use client";

import { useState, useEffect } from "react";
import { Article } from "@/entities/Article";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Eye, Search, TrendingUp, Clock, AlertTriangle, CheckCircle, Plus } from "lucide-react";
import { format } from "date-fns";
import Link from "next/link";
import { createPageUrl } from "@/utils";
import useAppLevelAuth from "@/hooks/useAppLevelAuth";

export default function Dashboard() {
  const { isLoggedIn } = useAppLevelAuth();
  const [recentAnalyses, setRecentAnalyses] = useState<any[]>([]);
  const [stats, setStats] = useState({
    totalAnalyses: 0,
    noBias: 0,
    mildBias: 0,
    strongBias: 0
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!isLoggedIn) return;
    loadDashboardData();
  }, [isLoggedIn]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const articles = await Article.list("createdAt:desc", 5);
      setRecentAnalyses(articles);
      
      // Calculate stats
      const allArticles = await Article.list("createdAt:desc", 1000);
      const totalAnalyses = allArticles.length;
      const noBias = allArticles.filter(a => a.biasLevel === 'none').length;
      const mildBias = allArticles.filter(a => a.biasLevel === 'mild').length;
      const strongBias = allArticles.filter(a => a.biasLevel === 'strong').length;
      
      setStats({ totalAnalyses, noBias, mildBias, strongBias });
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getBiasIcon = (level: string) => {
    switch (level) {
      case 'none':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'mild':
        return <AlertTriangle className="h-4 w-4 text-yellow-600" />;
      case 'strong':
        return <AlertTriangle className="h-4 w-4 text-red-600" />;
      default:
        return <CheckCircle className="h-4 w-4 text-gray-600" />;
    }
  };

  const getBiasColor = (level: string) => {
    switch (level) {
      case 'none':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'mild':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'strong':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  if (!isLoggedIn) return null;

  if (loading) {
    return (
      <div className="space-y-8 pt-4 md:pt-0">
        <div className="flex flex-col gap-4">
          <div className="space-y-3">
            <div className="h-8 bg-slate-200 rounded w-64 animate-pulse"></div>
            <div className="h-4 bg-slate-100 rounded w-96 animate-pulse"></div>
          </div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="h-32 bg-slate-100 rounded-lg animate-pulse"></div>
          ))}
        </div>
        <div className="h-80 bg-slate-100 rounded-lg animate-pulse"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6 md:space-y-8 w-full max-w-full overflow-hidden pt-4 md:pt-0">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-3 mb-3">
            <Eye className="h-6 w-6 text-blue-600" />
            <h1 className="text-3xl font-bold text-slate-800">Dashboard</h1>
          </div>
          <p className="text-slate-600 text-base">Welcome to NuanceReader. Analyze news articles for bias and get neutral summaries.</p>
        </div>
        <div className="flex gap-3">
          <Link href={createPageUrl('Analyze')}>
            <Button className="gap-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold shadow-lg">
              <Search className="h-4 w-4" />
              Analyze Article
            </Button>
          </Link>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
        <Card className="bg-white border border-slate-200 shadow-sm hover:shadow-md transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-semibold text-slate-500 uppercase tracking-wider">Total Analyses</p>
                <p className="text-2xl font-bold text-slate-800 mt-1">{stats.totalAnalyses}</p>
              </div>
              <div className="p-3 rounded-lg bg-blue-50 border border-blue-100">
                <TrendingUp className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white border border-slate-200 shadow-sm hover:shadow-md transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-semibold text-slate-500 uppercase tracking-wider">No Bias</p>
                <p className="text-2xl font-bold text-green-600 mt-1">{stats.noBias}</p>
              </div>
              <div className="p-3 rounded-lg bg-green-50 border border-green-100">
                <CheckCircle className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white border border-slate-200 shadow-sm hover:shadow-md transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-semibold text-slate-500 uppercase tracking-wider">Mild Bias</p>
                <p className="text-2xl font-bold text-yellow-600 mt-1">{stats.mildBias}</p>
              </div>
              <div className="p-3 rounded-lg bg-yellow-50 border border-yellow-100">
                <AlertTriangle className="h-6 w-6 text-yellow-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white border border-slate-200 shadow-sm hover:shadow-md transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-semibold text-slate-500 uppercase tracking-wider">Strong Bias</p>
                <p className="text-2xl font-bold text-red-600 mt-1">{stats.strongBias}</p>
              </div>
              <div className="p-3 rounded-lg bg-red-50 border border-red-100">
                <AlertTriangle className="h-6 w-6 text-red-600" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Recent Analyses */}
      <Card className="bg-white border border-slate-200 shadow-sm">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-lg text-slate-800">
              <Clock className="h-5 w-5 text-blue-600" />
              Recent Analyses
            </CardTitle>
            <Link href={createPageUrl('History')}>
              <Button variant="outline" size="sm" className="text-sm">
                View All
              </Button>
            </Link>
          </div>
        </CardHeader>
        <CardContent>
          {recentAnalyses.length === 0 ? (
            <div className="text-center py-12">
              <Search className="h-12 w-12 text-slate-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-slate-800 mb-2">No analyses yet</h3>
              <p className="text-slate-600 mb-6">Start by analyzing your first news article</p>
              <Link href={createPageUrl('Analyze')}>
                <Button className="gap-2 bg-blue-600 hover:bg-blue-700 text-white">
                  <Plus className="h-4 w-4" />
                  Analyze Article
                </Button>
              </Link>
            </div>
          ) : (
            <div className="space-y-4">
              {recentAnalyses.map((article) => (
                <div
                  key={article.id}
                  className="p-4 rounded-lg border border-slate-200 hover:border-blue-200 hover:bg-blue-50/30 transition-all duration-200"
                >
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex-1 min-w-0">
                      <h3 className="font-semibold text-slate-800 mb-2 line-clamp-2">
                        {article.title}
                      </h3>
                      <p className="text-sm text-slate-600 mb-3 line-clamp-2">
                        {article.summary}
                      </p>
                      <div className="flex items-center gap-3 text-xs text-slate-500">
                        <span>{format(new Date(article.analysisDate), "MMM d, yyyy 'at' h:mm a")}</span>
                        {article.source && <span>â€¢ {article.source}</span>}
                      </div>
                    </div>
                    <div className="flex flex-col items-end gap-2 shrink-0">
                      <Badge className={`gap-1 ${getBiasColor(article.biasLevel)} border`}>
                        {getBiasIcon(article.biasLevel)}
                        {article.biasLevel === 'none' ? 'No Bias' : 
                         article.biasLevel === 'mild' ? 'Mild Bias' : 'Strong Bias'}
                      </Badge>
                      {article.biasTypes && article.biasTypes.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {article.biasTypes.slice(0, 2).map((type: string, index: number) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {type}
                            </Badge>
                          ))}
                          {article.biasTypes.length > 2 && (
                            <Badge variant="outline" className="text-xs">
                              +{article.biasTypes.length - 2}
                            </Badge>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
